create trigger t1
AFTER INSERT on emp
for each row

BEGIN
select * from emp;
END
//


You're seeing this error because **MySQL does not allow `SELECT *` (or any result set) inside a trigger**. The key error message:

> `ERROR 1415 (0A000): Not allowed to return a result set from a trigger`

### üî¥ Why this happens:

MySQL **triggers are meant for background data manipulation**, not for returning data to the user. You **cannot use `SELECT * FROM ...` or `SELECT col` in a trigger** to produce output.

---

## ‚úÖ What You Can Do Instead:

If your goal is to **log or audit** data, you should insert it into another table, not try to select it.

### üîπ Example: Audit Trigger Instead of Select

```sql
CREATE TABLE emp_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    empno INT,
    action_time DATETIME
);
```

Then the trigger:

```sql
DELIMITER //

CREATE TRIGGER t1
AFTER INSERT ON emp
FOR EACH ROW
BEGIN
    INSERT INTO emp_log (empno, action_time)
    VALUES (NEW.EMPNO, NOW());
END //

DELIMITER ;
```

---

### ‚úÖ What This Does:

* After a new employee is inserted into `emp`, this trigger logs their `EMPNO` and current time into `emp_log`.

---

### üîç Summary

| ‚ùå Not Allowed                | ‚úÖ Allowed                             |
| ---------------------------- | ------------------------------------- |
| `SELECT * FROM emp;`         | `INSERT INTO log_table VALUES (...);` |
| Returning result sets        | Updating/inserting other tables       |
| Printing output from trigger | Silent background processing          |

---

Would you like to log full employee details or only certain fields like ENAME and SAL?



create table log(EMPNO INT(10),ENAME VARCHAR(255),CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP)//


create trigger log_data
AFTER INSERT ON emp
FOR EACH ROW
BEGIN
insert into log values(NEW.EMPNO,NEW.ENAME,NOW());
END//

üìçdummy insert
INSERT INTO emp (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) VALUES (7960, 'DummyEmp', 'Clerk', 7782, '2025-05-08', 1200.00, NULL, 30);




‚úÖcreated a trigger to insert into log table after each new insert

mysql> select * from emp//
+-------+-----------+-----------+------+------------+---------+---------+--------+
| EMPNO | ENAME     | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |
+-------+-----------+-----------+------+------------+---------+---------+--------+
|  7369 | Smith     | Clerk     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |
|  7499 | Allen     | Salesman  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |
|  7521 | Ward      | Salesman  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |
|  7566 | Jones     | Manager   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |
|  7654 | Martin    | Salesman  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |
|  7698 | Blake     | Manager   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |
|  7782 | Clark     | Manager   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |
|  7788 | Scott     | Analyst   | 7566 | 1982-09-12 | 3000.00 |    NULL |     20 |
|  7839 | King      | President | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |
|  7844 | Turner    | Salesman  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |
|  7876 | Adams     | Clerk     | 7788 | 1983-01-12 | 1100.00 |    NULL |     20 |
|  7900 | James     | Clerk     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |
|  7902 | Ford      | Analyst   | 7566 | 1981-12-04 | 3000.00 |    NULL |     20 |
|  7934 | Miller    | Clerk     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |
|  7950 | RandomEmp | Analyst   | 7839 | 2025-01-11 | 3500.00 |  500.00 |     20 |
+-------+-----------+-----------+------+------------+---------+---------+--------+
15 rows in set (0.00 sec)

mysql> select * from log//
Empty set (0.00 sec)

mysql> desc log//
+------------+--------------+------+-----+-------------------+-------------------+
| Field      | Type         | Null | Key | Default           | Extra             |
+------------+--------------+------+-----+-------------------+-------------------+
| EMPNO      | int          | YES  |     | NULL              |                   |
| ENAME      | varchar(255) | YES  |     | NULL              |                   |
| CREATED_AT | datetime     | YES  |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
+------------+--------------+------+-----+-------------------+-------------------+
3 rows in set (0.00 sec)

mysql> create trigger log_data
    -> AFTER INSERT ON emp
    -> FOR EACH ROW
    -> BEGIN
    -> insert into log values(NEW.EMPNO,NEW.ENAME,NOW());
    -> END//
Query OK, 0 rows affected (0.01 sec)

mysql> INSERT INTO emp (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO) VALUES (7960, 'DummyEmp', 'Clerk', 7782, '2025-05-08', 1200.00, NULL, 30);
    -> //
Query OK, 1 row affected (0.01 sec)

mysql> select * from log//
+-------+----------+---------------------+
| EMPNO | ENAME    | CREATED_AT          |
+-------+----------+---------------------+
|  7960 | DummyEmp | 2025-05-08 14:42:10 |
+-------+----------+---------------------+
1 row in set (0.00 sec)




‚úÖ use of for each row
Because SQL statements like INSERT, UPDATE, and DELETE can affect multiple rows at once.

Without FOR EACH ROW, MySQL wouldn't know whether to run the trigger once per statement or once per affected row. 
MySQL only supports row-level triggers, not statement-level triggers ‚Äî so FOR EACH ROW is required.

‚úÖ use of NEW keyword
In MySQL triggers, NEW is a special keyword used to refer to column values of the row being inserted or updated.

It is available in:

BEFORE INSERT

AFTER INSERT

BEFORE UPDATE

AFTER UPDATE

‚úÖ use of OLD keyword
OLD is a special keyword in MySQL triggers that refers to the value of a column before it was updated or deleted.

It is available in:

BEFORE UPDATE

AFTER UPDATE

BEFORE DELETE

AFTER DELETE




üìçProblem statement for the trigger
Awesome! Here's your **practice challenge** using both `BEFORE` and `AFTER` triggers on the same table ‚Äî this will help you understand both data manipulation and auditing.

---

## üß™ **Practice Scenario**

You have an `emp` table like this:

```sql
CREATE TABLE emp (
    EMPNO INT PRIMARY KEY,
    ENAME VARCHAR(100),
    SAL DECIMAL(10,2),
    HIREDATE DATE
);
```

You also have a log table:

```sql
CREATE TABLE emp_log (
    EMPNO INT,
    ACTION_TYPE VARCHAR(20),
    SAL_BEFORE DECIMAL(10,2),
    SAL_AFTER DECIMAL(10,2),
    LOG_TIME DATETIME
);
```

---

## üéØ **Your Task**

### üßæ Step 1 ‚Äî BEFORE Trigger:

Create a `BEFORE UPDATE` trigger that **ensures SAL cannot be updated to less than 1000**.
If a user tries to set `SAL < 1000`, the trigger should **force it to 1000** before the row is saved.

### üìù Step 2 ‚Äî AFTER Trigger:

Create an `AFTER UPDATE` trigger that **logs salary changes** into the `emp_log` table.

Log the following:

* `EMPNO`
* `'SALARY CHANGE'` as `ACTION_TYPE`
* Old salary (`OLD.SAL`)
* New salary (`NEW.SAL`)
* Current time (`NOW()`)

---

## üí° Example Flow

Someone runs:

```sql
UPDATE emp SET SAL = 800 WHERE EMPNO = 7369;
```

1. ‚úÖ The **BEFORE UPDATE** trigger changes 800 ‚Üí 1000.
2. ‚úÖ The **AFTER UPDATE** trigger logs this change:

   * `EMPNO = 7369`
   * `SAL_BEFORE = 800`
   * `SAL_AFTER = 1000`
   * `ACTION_TYPE = 'SALARY CHANGE'`

---

Would you like me to write out the full SQL code for this solution so you can try and test it directly?
